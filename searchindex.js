Search.setIndex({"docnames": ["api", "generated/cvpy.annotation.base.Credentials.Credentials", "generated/cvpy.annotation.base.Project.Project", "generated/cvpy.annotation.base.Project.Project.as_dict", "generated/cvpy.annotation.base.Project.Project.get_annotations", "generated/cvpy.annotation.base.Project.Project.post_images", "generated/cvpy.annotation.base.Project.Project.resume", "generated/cvpy.annotation.base.Project.Project.save", "generated/cvpy.annotation.base.Project.Project.to_json", "generated/cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator", "generated/cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.authenticate", "generated/cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.generate_cvat_token", "generated/cvpy.annotation.cvat.CVATProject.CVATProject", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.as_dict", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.from_json", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.get_annotations", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.post_images", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.resume", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.save", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.to_json", "generated/cvpy.annotation.cvat.CVATTask.CVATTask", "generated/cvpy.annotation.cvat.CVATTask.CVATTask.from_dict", "generated/cvpy.base.CASThreadTunerResults.CASThreadTunerResults", "generated/cvpy.base.CASThreadTunerResults.CASThreadTunerResults.plot_exec_times", "generated/cvpy.base.ImageTable.ImageTable", "generated/cvpy.base.ImageTable.ImageTable.as_dict", "generated/cvpy.base.ImageTable.ImageTable.from_table", "generated/cvpy.base.ImageTable.ImageTable.has_decoded_images", "generated/cvpy.base.ImageTable.ImageTable.load", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_geometry_info", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_image_array", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.from_table", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.load", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.morphological_gradient", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.sphericity", "generated/cvpy.biomedimage.BiomedImageTable.ImageTable.as_dict", "generated/cvpy.biomedimage.BiomedImageTable.ImageTable.has_decoded_images", "generated/cvpy.image.NaturalImageTable.NaturalImageTable", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.as_dict", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.from_table", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.has_decoded_images", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.load", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.mask_image", "generated/cvpy.utils.CASThreadTuner.CASThreadTuner", "generated/cvpy.utils.CASThreadTuner.CASThreadTuner.tune_thread_count", "generated/cvpy.utils.ImageUtils.ImageUtils", "generated/cvpy.utils.ImageUtils.ImageUtils.convert_numpy_to_wide", "generated/cvpy.utils.ImageUtils.ImageUtils.convert_to_CAS_column", "generated/cvpy.utils.ImageUtils.ImageUtils.convert_wide_to_numpy", "generated/cvpy.utils.ImageUtils.ImageUtils.get_image_array", "generated/cvpy.utils.ImageUtils.ImageUtils.get_image_array_const_ctype", "generated/cvpy.utils.ImageUtils.ImageUtils.get_image_array_from_row", "generated/cvpy.visualization.display_3D_image_slices", "generated/cvpy.visualization.display_3D_image_slices_from_array", "generated/cvpy.visualization.display_3D_surface", "generated/cvpy.visualization.display_image_slice", "index", "installation", "license"], "filenames": ["api.rst", "generated/cvpy.annotation.base.Credentials.Credentials.rst", "generated/cvpy.annotation.base.Project.Project.rst", "generated/cvpy.annotation.base.Project.Project.as_dict.rst", "generated/cvpy.annotation.base.Project.Project.get_annotations.rst", "generated/cvpy.annotation.base.Project.Project.post_images.rst", "generated/cvpy.annotation.base.Project.Project.resume.rst", "generated/cvpy.annotation.base.Project.Project.save.rst", "generated/cvpy.annotation.base.Project.Project.to_json.rst", "generated/cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.rst", "generated/cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.authenticate.rst", "generated/cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.generate_cvat_token.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.as_dict.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.from_json.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.get_annotations.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.post_images.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.resume.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.save.rst", "generated/cvpy.annotation.cvat.CVATProject.CVATProject.to_json.rst", "generated/cvpy.annotation.cvat.CVATTask.CVATTask.rst", "generated/cvpy.annotation.cvat.CVATTask.CVATTask.from_dict.rst", "generated/cvpy.base.CASThreadTunerResults.CASThreadTunerResults.rst", "generated/cvpy.base.CASThreadTunerResults.CASThreadTunerResults.plot_exec_times.rst", "generated/cvpy.base.ImageTable.ImageTable.rst", "generated/cvpy.base.ImageTable.ImageTable.as_dict.rst", "generated/cvpy.base.ImageTable.ImageTable.from_table.rst", "generated/cvpy.base.ImageTable.ImageTable.has_decoded_images.rst", "generated/cvpy.base.ImageTable.ImageTable.load.rst", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.rst", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_geometry_info.rst", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_image_array.rst", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.from_table.rst", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.load.rst", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.morphological_gradient.rst", "generated/cvpy.biomedimage.BiomedImageTable.BiomedImageTable.sphericity.rst", "generated/cvpy.biomedimage.BiomedImageTable.ImageTable.as_dict.rst", "generated/cvpy.biomedimage.BiomedImageTable.ImageTable.has_decoded_images.rst", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.rst", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.as_dict.rst", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.from_table.rst", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.has_decoded_images.rst", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.load.rst", "generated/cvpy.image.NaturalImageTable.NaturalImageTable.mask_image.rst", "generated/cvpy.utils.CASThreadTuner.CASThreadTuner.rst", "generated/cvpy.utils.CASThreadTuner.CASThreadTuner.tune_thread_count.rst", "generated/cvpy.utils.ImageUtils.ImageUtils.rst", "generated/cvpy.utils.ImageUtils.ImageUtils.convert_numpy_to_wide.rst", "generated/cvpy.utils.ImageUtils.ImageUtils.convert_to_CAS_column.rst", "generated/cvpy.utils.ImageUtils.ImageUtils.convert_wide_to_numpy.rst", "generated/cvpy.utils.ImageUtils.ImageUtils.get_image_array.rst", "generated/cvpy.utils.ImageUtils.ImageUtils.get_image_array_const_ctype.rst", "generated/cvpy.utils.ImageUtils.ImageUtils.get_image_array_from_row.rst", "generated/cvpy.visualization.display_3D_image_slices.rst", "generated/cvpy.visualization.display_3D_image_slices_from_array.rst", "generated/cvpy.visualization.display_3D_surface.rst", "generated/cvpy.visualization.display_image_slice.rst", "index.rst", "installation.rst", "license.rst"], "titles": ["API Reference", "cvpy.annotation.base.Credentials.Credentials", "cvpy.annotation.base.Project.Project", "cvpy.annotation.base.Project.Project.as_dict", "cvpy.annotation.base.Project.Project.get_annotations", "cvpy.annotation.base.Project.Project.post_images", "cvpy.annotation.base.Project.Project.resume", "cvpy.annotation.base.Project.Project.save", "cvpy.annotation.base.Project.Project.to_json", "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator", "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.authenticate", "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.generate_cvat_token", "cvpy.annotation.cvat.CVATProject.CVATProject", "cvpy.annotation.cvat.CVATProject.CVATProject.as_dict", "cvpy.annotation.cvat.CVATProject.CVATProject.from_json", "cvpy.annotation.cvat.CVATProject.CVATProject.get_annotations", "cvpy.annotation.cvat.CVATProject.CVATProject.post_images", "cvpy.annotation.cvat.CVATProject.CVATProject.resume", "cvpy.annotation.cvat.CVATProject.CVATProject.save", "cvpy.annotation.cvat.CVATProject.CVATProject.to_json", "cvpy.annotation.cvat.CVATTask.CVATTask", "cvpy.annotation.cvat.CVATTask.CVATTask.from_dict", "cvpy.base.CASThreadTunerResults.CASThreadTunerResults", "cvpy.base.CASThreadTunerResults.CASThreadTunerResults.plot_exec_times", "cvpy.base.ImageTable.ImageTable", "cvpy.base.ImageTable.ImageTable.as_dict", "cvpy.base.ImageTable.ImageTable.from_table", "cvpy.base.ImageTable.ImageTable.has_decoded_images", "cvpy.base.ImageTable.ImageTable.load", "cvpy.biomedimage.BiomedImageTable.BiomedImageTable", "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_geometry_info", "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_image_array", "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.from_table", "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.load", "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.morphological_gradient", "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.sphericity", "cvpy.biomedimage.BiomedImageTable.ImageTable.as_dict", "cvpy.biomedimage.BiomedImageTable.ImageTable.has_decoded_images", "cvpy.image.NaturalImageTable.NaturalImageTable", "cvpy.image.NaturalImageTable.NaturalImageTable.as_dict", "cvpy.image.NaturalImageTable.NaturalImageTable.from_table", "cvpy.image.NaturalImageTable.NaturalImageTable.has_decoded_images", "cvpy.image.NaturalImageTable.NaturalImageTable.load", "cvpy.image.NaturalImageTable.NaturalImageTable.mask_image", "cvpy.utils.CASThreadTuner.CASThreadTuner", "cvpy.utils.CASThreadTuner.CASThreadTuner.tune_thread_count", "cvpy.utils.ImageUtils.ImageUtils", "cvpy.utils.ImageUtils.ImageUtils.convert_numpy_to_wide", "cvpy.utils.ImageUtils.ImageUtils.convert_to_CAS_column", "cvpy.utils.ImageUtils.ImageUtils.convert_wide_to_numpy", "cvpy.utils.ImageUtils.ImageUtils.get_image_array", "cvpy.utils.ImageUtils.ImageUtils.get_image_array_const_ctype", "cvpy.utils.ImageUtils.ImageUtils.get_image_array_from_row", "cvpy.visualization.display_3D_image_slices", "cvpy.visualization.display_3D_image_slices_from_array", "cvpy.visualization.display_3D_surface", "cvpy.visualization.display_image_slice", "SAS Viya Computer Vision API for Python", "Installation", "License"], "terms": {"class": [1, 2, 9, 12, 20, 22, 23, 24, 29, 31, 34, 35, 38, 43, 44, 45, 46, 59], "usernam": [1, 11], "str": [1, 2, 6, 7, 10, 12, 17, 18, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 42, 43, 48, 51, 52, 53, 56], "none": [1, 2, 4, 5, 7, 12, 15, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 42, 43, 45], "password": [1, 11], "token": [1, 11], "auth_fil": 1, "construct": [1, 22, 34, 35], "an": [1, 2, 6, 7, 26, 28, 32, 33, 40, 42, 43, 45, 50, 51, 55, 56, 58, 59], "object": [1, 2, 3, 4, 12, 13, 14, 15, 17, 21, 22, 25, 34, 35, 36, 39, 45, 59], "contain": [1, 4, 5, 16, 24, 25, 26, 27, 28, 29, 32, 33, 36, 37, 38, 39, 40, 41, 42, 59], "authent": [1, 9, 11], "inform": [1, 30, 59], "The": [1, 2, 3, 13, 28, 33, 42, 58, 59], "i": [1, 3, 13, 38, 53, 54, 55, 57, 58, 59], "recommend": [1, 59], "higher": 1, "level": [1, 35, 57], "secur": 1, "thi": [1, 2, 3, 4, 8, 11, 12, 13, 19, 20, 25, 27, 30, 31, 34, 35, 36, 37, 39, 41, 57, 59], "auth": 1, "file": [1, 11, 24, 26, 29, 32, 38, 40, 58, 59], "must": [1, 2, 58, 59], "readabl": [1, 59], "writabl": 1, "group": 1, "other": [1, 59], "should": [1, 59], "have": [1, 58, 59], "singl": 1, "line": 1, "either": [1, 26, 32, 40, 59], "comma": 1, "separ": [1, 59], "user": [1, 11, 45, 57, 58], "If": [1, 58, 59], "paramet": [1, 2, 4, 5, 6, 7, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 28, 29, 30, 31, 33, 34, 35, 38, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "provid": [1, 57, 59], "constructor": 1, "read": [1, 17, 57], "default": [1, 28, 33, 42], "annotation_auth": [1, 11], "specifi": [1, 2, 4, 5, 6, 7, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "server": [1, 2, 6, 11, 12, 22, 28, 33, 42], "name": [1, 2, 11, 12, 17, 24, 26, 29, 32, 38, 40, 48, 59], "path": [1, 6, 7, 17, 18, 24, 26, 28, 29, 32, 33, 38, 40, 42], "__init__": [1, 2, 9, 12, 20, 22, 24, 29, 38, 44, 46], "method": [1, 2, 9, 12, 20, 22, 24, 29, 38, 44, 46], "attribut": [1, 2, 9, 12, 20, 22, 24, 29, 38, 59], "cas_connect": [2, 6, 12, 17], "ca": [2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 22, 23, 28, 33, 34, 35, 42, 45, 48, 51, 53, 57], "url": [2, 10, 11, 12], "credenti": [2, 6, 10, 12, 58], "project_nam": [2, 6, 12, 17], "annotation_typ": [2, 12], "annotationtyp": [2, 12], "label": [2, 12, 24, 26, 29, 32, 38, 40], "list": [2, 12, 22, 28, 33, 34, 42, 43, 59], "annotationlabel": [2, 12], "defin": [2, 9, 12, 20, 45, 59], "interfac": [2, 59], "tool": [2, 22, 57], "ha": [2, 50, 52, 59], "sever": 2, "abstract": 2, "implement": [2, 29, 38], "subclass": 2, "requir": [2, 58, 59], "includ": [2, 59], "get_annot": 2, "post_imag": [2, 4], "resum": 2, "save": [2, 6, 17], "connect": [2, 3, 6, 12, 13, 17, 28, 33, 34, 35, 42, 53], "cvat": [2, 4, 5, 6, 57], "call": [2, 4, 12, 28, 33, 34, 35, 42, 45], "rest": [2, 12], "api": [2, 12, 34, 35], "login": [2, 12], "type": [2, 12, 24, 26, 29, 31, 32, 38, 40, 51, 59], "creat": [3, 5, 8, 13, 14, 16, 19, 21, 25, 26, 32, 36, 39, 40], "dictionari": [3, 13, 21, 25, 36, 39], "represent": [3, 8, 13, 14, 19, 25, 36, 39], "return": [3, 8, 11, 13, 14, 17, 19, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52], "d": [3, 13, 25, 36, 39, 59], "A": [3, 8, 13, 14, 17, 19, 21, 38, 59], "all": [3, 13, 14, 17, 21, 25, 36, 39, 59], "properti": [3, 13, 14, 17, 21, 25, 36, 39], "kei": [3, 13, 14, 21, 25, 36, 39], "valu": [3, 13, 14, 21, 25, 35, 36, 39], "ad": [3, 13], "annotated_t": [4, 15], "castabl": [4, 15, 24, 26, 29, 32, 34, 35, 38, 40], "image_t": [4, 5, 15, 16, 20, 28, 33, 34, 35, 42], "imaget": [4, 5, 15, 16, 20, 32, 33, 40, 42, 43], "fetch": [4, 15, 30, 31, 50, 55, 57], "from": [4, 5, 14, 15, 16, 17, 21, 26, 30, 31, 32, 34, 35, 40, 50, 51, 52, 57, 58, 59], "correspond": [4, 15], "imag": [4, 5, 15, 16, 20, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57], "tabl": [4, 5, 6, 7, 15, 16, 17, 18, 20, 24, 27, 28, 29, 33, 34, 35, 37, 38, 41, 42, 43, 51], "output": [4, 15, 28, 33, 34, 35, 42, 43], "where": [4, 6, 7, 15, 17, 18, 59], "store": [4, 15, 22], "input": [4, 5, 16, 24, 26, 29, 32, 35, 38, 40, 56], "encod": [4, 5, 27, 37, 41], "were": [4, 6, 17], "us": [4, 15, 35, 43, 58, 59], "cvatproject": 4, "task": [5, 16, 20, 21], "under": [5, 6, 7, 16, 17, 18, 57, 59], "upload": [5, 16], "static": [6, 10, 11, 14, 17, 21, 26, 28, 32, 33, 40, 42, 45, 47, 48, 49, 50, 51, 52], "caslib": [6, 7, 17, 18], "relative_path": [6, 7, 17, 18], "session": [6, 7, 45], "cas_sess": 6, "which": [6, 7, 17, 18, 34, 43, 59], "rel": [6, 7, 17, 18], "wa": [6, 15, 17, 59], "replac": [7, 18, 59], "bool": [7, 18, 27, 35, 37, 41, 43, 53, 54, 55], "fals": [7, 18, 27, 37, 41, 43, 53, 54, 55], "ar": [7, 18, 35, 58, 59], "when": [7, 18, 35, 53, 54, 55], "set": [7, 14, 17, 18, 21, 35, 45, 53, 54, 55, 57], "true": [7, 18, 27, 35, 37, 41, 53, 54, 55], "thei": [7, 18], "alreadi": [7, 18, 58], "present": [7, 18, 22], "json": [8, 14, 17, 19], "string": [8, 14, 17, 19, 48], "arg": [9, 44, 46], "kwarg": [9, 44, 46], "against": [11, 59], "function": [11, 29, 38, 45], "prompt": 11, "enter": 11, "In": [11, 59], "case": 11, "success": 11, "write": [11, 59], "": [11, 34, 35, 48, 59], "home": 11, "directori": 11, "interact": [12, 20], "project": [12, 14, 16, 17, 18, 19, 20, 57], "project_json_str": 14, "post": 15, "belong": 20, "object_dict": 21, "cas_server_mod": 22, "casservermod": 22, "controller_thread_rang": [22, 45], "rang": [22, 45], "worker_thread_rang": [22, 45], "objective_measur": [22, 45], "statist": [22, 45], "controller_optimal_thread_count": 22, "int": [22, 30, 31, 34, 45, 50, 51, 52, 53, 56], "worker_optimal_thread_count": 22, "mean_exec_tim": 22, "median_exec_tim": 22, "minimum_exec_tim": 22, "maximum_exec_tim": 22, "stdev_exec_tim": 22, "result": [22, 23, 57, 59], "thread": [22, 23, 45, 57], "optim": [22, 45], "architectur": 22, "control": [22, 45, 59], "node": [22, 45], "each": [22, 24, 26, 29, 32, 34, 38, 40, 45, 59], "worker": [22, 45], "measur": [22, 45], "perform": [22, 23, 45, 59], "over": [22, 45], "given": [22, 23, 35, 45], "iter": [22, 45], "count": [22, 45, 51], "mean": [22, 45, 59], "record": 22, "execut": [22, 59], "time": 22, "median": [22, 45], "minimum": [22, 45, 56], "maximum": [22, 45, 56], "standard": 22, "deviat": 22, "fig_width": 23, "float": [23, 35, 45, 55], "8": [23, 58, 59], "fig_height": 23, "figur": 23, "plot": 23, "tuner": [23, 57], "width": [23, 34], "height": [23, 34], "matplotlib": [23, 57], "dimens": [24, 26, 29, 30, 31, 32, 38, 40, 50, 51, 52, 56], "resolut": [24, 26, 29, 31, 32, 38, 40, 50, 51, 52, 56], "imageformat": [24, 26, 29, 32, 38, 40], "id": [24, 26, 29, 32, 38, 40], "size": [24, 26, 29, 32, 38, 40], "naturalimaget": [24, 26, 28, 32, 33], "biomedimaget": [24, 26, 28, 40, 42], "data": [24, 26, 29, 32, 38, 40, 57, 58], "column": [24, 26, 29, 30, 32, 34, 38, 40, 43, 48], "binari": [24, 26, 29, 32, 38, 40, 50, 51, 52], "format": [24, 26, 29, 31, 32, 38, 40, 50, 52, 56, 59], "variabl": [24, 26, 29, 32, 38, 40], "identifi": [24, 26, 29, 32, 38, 40, 59], "byte": [24, 26, 29, 32, 38, 40, 47, 49, 52], "length": [24, 26, 29, 32, 38, 40], "dict": [25, 28, 33, 34, 35, 36, 39, 42, 43], "cas_tabl": [26, 32, 40], "image_typ": [26, 28, 32, 33, 40, 42], "imagetyp": [26, 32, 40], "biom": [26, 32, 34, 35, 40], "natur": [26, 32, 38, 40, 57], "instanc": [26, 28, 32, 33, 40, 42], "check": [27, 37, 41], "decod": [27, 37, 41, 43], "b": [27, 37, 41, 59], "otherwis": [27, 37, 41, 59], "load_parm": [28, 33, 42], "output_table_parm": [28, 33, 34, 35, 42, 43], "loadimag": [28, 33, 42], "action": [28, 33, 42, 45, 57], "can": [28, 33, 42, 58], "found": [28, 33, 42], "here": [28, 33, 42, 58], "http": [28, 33, 42, 57, 58, 59], "go": [28, 33, 42], "document": [28, 33, 42, 57, 59], "sa": [28, 33, 42, 58], "com": [28, 33, 34, 35, 42, 57, 58], "doc": [28, 33, 42], "en": [28, 33, 42], "pgmsascdc": [28, 33, 42], "casactml": [28, 33, 42], "htm": [28, 33, 42], "compg": [28, 33, 42], "casoutt": [28, 33, 42], "15param": [28, 33, 42], "biomed": [29, 38, 57], "process": [29, 38], "n": [30, 31, 50, 51], "0": [30, 31, 53, 54, 55, 56, 57, 59], "qry": [30, 31], "poscol": 30, "_position_": 30, "oricol": 30, "_orientation_": 30, "spacol": 30, "_spacing_": 30, "dimcol": 30, "_dimension_": [30, 31], "tupl": [30, 55, 56], "geometri": 30, "number": [30, 31, 45, 50, 52], "queri": [30, 31], "posit": [30, 56], "orient": [30, 56], "space": [30, 35], "_image_": 31, "dim": [31, 56], "re": 31, "_resolution_": 31, "ctype": [31, 51], "_channeltype_": 31, "ccount": 31, "1": [31, 50, 51, 52, 55, 57, 58, 59], "ndarrai": [31, 45, 47, 49, 50, 51, 52, 54], "arrai": [31, 47, 49, 50, 51, 54], "addit": [31, 56, 59], "channel": [31, 50, 51, 52], "numpi": [31, 47, 49, 50, 51, 52, 54, 58], "base": [32, 33, 40, 42, 57, 59], "kernel_width": 34, "3": [34, 58, 59], "kernel_height": 34, "copy_var": [34, 43], "comput": [34, 45, 59], "morpholog": 34, "gradient": 34, "3d": [34, 52, 53, 54, 56], "grayscal": 34, "kernel": 34, "copi": [34, 43, 59], "exampl": [34, 35, 58, 59], "import": [34, 35, 59], "swat": [34, 35, 53, 55, 58], "labelconnect": [34, 35], "5570": [34, 35], "pass": 34, "output_t": [34, 35], "use_spac": 35, "input_background": 35, "label_connect": 35, "quantifi": 35, "compon": 35, "calcul": 35, "background": 35, "face": [35, 55], "vertex": 35, "ani": [38, 59], "photograph": 38, "mask": 43, "add_column": 43, "appli": [43, 59], "whether": [43, 59], "extra": 43, "add": [43, 59], "action_funct": 45, "callabl": 45, "setup_funct": 45, "teardown_funct": 45, "5": [45, 58, 59], "4": [45, 59], "65": 45, "casthreadtunerresult": 45, "up": 45, "environ": [45, 58], "termin": [45, 59], "combin": [45, 59], "enum": 45, "enummeta": 45, "stdev": 45, "__main__": 45, "numpy_arrai": 47, "convert": [47, 48, 49], "wide": [47, 49], "np": 47, "wide_imag": 49, "buffer": 49, "image_binari": [50, 51, 52], "channel_count": [50, 51, 52], "get": [50, 51, 52], "panda": [50, 51, 56], "seri": [50, 51, 56], "index": [50, 51, 53, 56], "option": [50, 52], "constant": 51, "myformat": 52, "row": 52, "self": 53, "hold": [53, 54, 55, 59], "slice_index_x": [53, 54], "slice_index_i": [53, 54], "slice_index_z": [53, 54], "displai": [53, 54, 55, 56, 59], "slice": [53, 54, 56], "held": [53, 54, 55], "x": 53, "axi": 53, "y": 53, "z": 53, "surfac": 55, "vdata": 55, "fdata": 55, "color": 55, "op": 55, "sasdatafram": 55, "vertic": 55, "opac": 55, "ress": 56, "fmt": 56, "poss": 56, "ori": 56, "sca": 56, "perm": 56, "image_index": 56, "slice_index": 56, "rf": 56, "imin": 56, "100": 56, "imax": 56, "400": 56, "scale": 56, "permiss": [56, 59], "date": [57, 59], "mar": 57, "16": 57, "2023": 57, "version": [57, 58, 59], "dev": 57, "sourc": [57, 59], "repositori": [57, 58], "github": [57, 58], "sassoftwar": [57, 58], "cvpy": 57, "issu": [57, 59], "idea": 57, "support": [57, 59], "onlinedoc": 57, "html": 57, "high": 57, "librari": 57, "assist": 57, "biomedimag": 57, "help": 57, "visual": [57, 58], "These": 57, "allow": 57, "easili": 57, "abl": 57, "move": 57, "out": [57, 59], "common": [57, 59], "open": 57, "mayavi": 57, "streamlin": 57, "further": 57, "analysi": 57, "we": [57, 59], "welcom": 57, "your": [57, 58, 59], "pleas": [57, 58], "md": 57, "detail": [57, 58], "how": [57, 59], "submit": [57, 59], "apach": [57, 59], "2": [57, 58, 59], "see": [57, 58, 59], "full": [57, 58], "page": [57, 59], "instal": 57, "prerequisit": 57, "refer": 57, "annot": [57, 59], "util": 57, "display_image_slic": 57, "display_3d_image_slices_from_arrai": 57, "display_3d_image_slic": 57, "display_3d_surfac": 57, "To": [58, 59], "access": 58, "capabl": 58, "you": [58, 59], "need": 58, "follow": [58, 59], "python": 58, "greater": 58, "anaconda": 58, "distribut": [58, 59], "anoth": 58, "choic": 58, "script": 58, "wrapper": 58, "analyt": 58, "transfer": [58, 59], "packag": 58, "viya": 58, "activ": 58, "mine": 58, "machin": 58, "learn": 58, "vdmml": 58, "licens": 58, "scientif": 58, "also": [58, 59], "valid": 58, "backend": 58, "system": [58, 59], "administr": 58, "do": [58, 59], "account": 58, "written": [58, 59], "jupyt": 58, "notebook": 58, "wish": 58, "run": 58, "own": [58, 59], "still": 58, "view": 58, "browser": 58, "websit": 58, "heavi": 58, "complex": 58, "step": 58, "below": [58, 59], "vtk": 58, "critic": 58, "depend": 58, "pip": 58, "cp37": 58, "cp37m": 58, "win_amd64": 58, "whl": 58, "note": 58, "specif": [58, 59], "download": 58, "wheel": 58, "mai": [58, 59], "error": 58, "messag": 58, "about": 58, "like": 58, "build": 58, "correctli": 58, "first": 58, "ignor": 58, "pyqt": 58, "gui": 58, "toolkit": 58, "pyqt5": 58, "command": 58, "git": 58, "januari": 59, "2004": 59, "www": 59, "org": 59, "term": 59, "AND": 59, "condit": 59, "FOR": 59, "reproduct": 59, "definit": 59, "shall": 59, "section": 59, "through": 59, "9": 59, "licensor": 59, "copyright": 59, "owner": 59, "entiti": 59, "author": 59, "grant": 59, "legal": 59, "union": 59, "act": 59, "For": 59, "purpos": 59, "power": 59, "direct": 59, "indirect": 59, "caus": 59, "manag": 59, "contract": 59, "ii": 59, "ownership": 59, "fifti": 59, "percent": 59, "50": 59, "more": 59, "outstand": 59, "share": 59, "iii": 59, "benefici": 59, "individu": 59, "exercis": 59, "form": 59, "prefer": 59, "make": 59, "modif": 59, "limit": 59, "softwar": 59, "code": 59, "configur": 59, "mechan": 59, "transform": 59, "translat": 59, "compil": 59, "gener": 59, "convers": 59, "media": 59, "work": 59, "authorship": 59, "made": 59, "avail": 59, "indic": 59, "notic": 59, "attach": 59, "appendix": 59, "deriv": 59, "editori": 59, "revis": 59, "elabor": 59, "repres": 59, "whole": 59, "origin": 59, "remain": 59, "mere": 59, "link": 59, "bind": 59, "thereof": 59, "contribut": 59, "intention": 59, "inclus": 59, "behalf": 59, "electron": 59, "verbal": 59, "commun": 59, "sent": 59, "its": 59, "mail": 59, "track": 59, "discuss": 59, "improv": 59, "exclud": 59, "conspicu": 59, "mark": 59, "design": 59, "Not": 59, "contributor": 59, "whom": 59, "been": 59, "receiv": 59, "subsequ": 59, "incorpor": 59, "within": 59, "subject": 59, "herebi": 59, "perpetu": 59, "worldwid": 59, "non": 59, "exclus": 59, "charg": 59, "royalti": 59, "free": 59, "irrevoc": 59, "reproduc": 59, "prepar": 59, "publicli": 59, "sublicens": 59, "patent": 59, "except": 59, "state": 59, "offer": 59, "sell": 59, "onli": 59, "those": 59, "claim": 59, "necessarili": 59, "infring": 59, "alon": 59, "institut": 59, "litig": 59, "cross": 59, "counterclaim": 59, "lawsuit": 59, "alleg": 59, "constitut": 59, "contributori": 59, "redistribut": 59, "medium": 59, "without": 59, "meet": 59, "give": 59, "recipi": 59, "modifi": 59, "carri": 59, "promin": 59, "chang": 59, "c": 59, "retain": 59, "trademark": 59, "pertain": 59, "part": 59, "text": 59, "least": 59, "one": 59, "place": 59, "along": 59, "wherev": 59, "third": 59, "parti": 59, "normal": 59, "appear": 59, "content": 59, "alongsid": 59, "addendum": 59, "cannot": 59, "constru": 59, "statement": 59, "differ": 59, "compli": 59, "submiss": 59, "unless": 59, "explicitli": 59, "notwithstand": 59, "abov": 59, "noth": 59, "herein": 59, "supersed": 59, "agreement": 59, "regard": 59, "6": 59, "doe": 59, "trade": 59, "servic": 59, "product": 59, "reason": 59, "customari": 59, "describ": 59, "7": 59, "disclaim": 59, "warranti": 59, "applic": 59, "law": 59, "agre": 59, "AS": 59, "basi": 59, "OR": 59, "OF": 59, "kind": 59, "express": 59, "impli": 59, "titl": 59, "merchant": 59, "fit": 59, "particular": 59, "sole": 59, "respons": 59, "determin": 59, "appropri": 59, "assum": 59, "risk": 59, "associ": 59, "liabil": 59, "event": 59, "theori": 59, "tort": 59, "neglig": 59, "deliber": 59, "grossli": 59, "liabl": 59, "damag": 59, "special": 59, "incident": 59, "consequenti": 59, "charact": 59, "aris": 59, "inabl": 59, "loss": 59, "goodwil": 59, "stoppag": 59, "failur": 59, "malfunct": 59, "commerci": 59, "even": 59, "advis": 59, "possibl": 59, "accept": 59, "while": 59, "choos": 59, "fee": 59, "indemn": 59, "oblig": 59, "right": 59, "consist": 59, "howev": 59, "indemnifi": 59, "defend": 59, "harmless": 59, "incur": 59, "assert": 59, "end": 59, "boilerpl": 59, "field": 59, "enclos": 59, "bracket": 59, "don": 59, "t": 59, "comment": 59, "syntax": 59, "descript": 59, "same": 59, "print": 59, "easier": 59, "identif": 59, "archiv": 59, "yyyi": 59, "complianc": 59, "obtain": 59, "languag": 59, "govern": 59}, "objects": {"": [[57, 0, 0, "-", "cvpy"]], "cvpy.annotation.base.Credentials": [[1, 1, 1, "", "Credentials"]], "cvpy.annotation.base.Credentials.Credentials": [[1, 2, 1, "", "__init__"]], "cvpy.annotation.base.Project": [[2, 1, 1, "", "Project"]], "cvpy.annotation.base.Project.Project": [[2, 2, 1, "", "__init__"], [3, 2, 1, "", "as_dict"], [4, 2, 1, "", "get_annotations"], [5, 2, 1, "", "post_images"], [6, 2, 1, "", "resume"], [7, 2, 1, "", "save"], [8, 2, 1, "", "to_json"]], "cvpy.annotation.cvat.CVATAuthenticator": [[9, 1, 1, "", "CVATAuthenticator"]], "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator": [[9, 2, 1, "", "__init__"], [10, 2, 1, "", "authenticate"], [11, 2, 1, "", "generate_cvat_token"]], "cvpy.annotation.cvat.CVATProject": [[12, 1, 1, "", "CVATProject"]], "cvpy.annotation.cvat.CVATProject.CVATProject": [[12, 2, 1, "", "__init__"], [13, 2, 1, "", "as_dict"], [14, 2, 1, "", "from_json"], [15, 2, 1, "", "get_annotations"], [16, 2, 1, "", "post_images"], [17, 2, 1, "", "resume"], [18, 2, 1, "", "save"], [19, 2, 1, "", "to_json"]], "cvpy.annotation.cvat.CVATTask": [[20, 1, 1, "", "CVATTask"]], "cvpy.annotation.cvat.CVATTask.CVATTask": [[20, 2, 1, "", "__init__"], [21, 2, 1, "", "from_dict"]], "cvpy.base.CASThreadTunerResults": [[22, 1, 1, "", "CASThreadTunerResults"]], "cvpy.base.CASThreadTunerResults.CASThreadTunerResults": [[22, 2, 1, "", "__init__"], [23, 2, 1, "", "plot_exec_times"]], "cvpy.base.ImageTable": [[24, 1, 1, "", "ImageTable"]], "cvpy.base.ImageTable.ImageTable": [[24, 2, 1, "", "__init__"], [25, 2, 1, "", "as_dict"], [26, 2, 1, "", "from_table"], [27, 2, 1, "", "has_decoded_images"], [28, 2, 1, "", "load"]], "cvpy.biomedimage.BiomedImageTable": [[29, 1, 1, "", "BiomedImageTable"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable": [[29, 2, 1, "", "__init__"], [30, 2, 1, "", "fetch_geometry_info"], [31, 2, 1, "", "fetch_image_array"], [32, 2, 1, "", "from_table"], [33, 2, 1, "", "load"], [34, 2, 1, "", "morphological_gradient"], [35, 2, 1, "", "sphericity"]], "cvpy.biomedimage.BiomedImageTable.ImageTable": [[36, 2, 1, "", "as_dict"], [37, 2, 1, "", "has_decoded_images"]], "cvpy.image.NaturalImageTable": [[38, 1, 1, "", "NaturalImageTable"]], "cvpy.image.NaturalImageTable.NaturalImageTable": [[38, 2, 1, "", "__init__"], [39, 2, 1, "", "as_dict"], [40, 2, 1, "", "from_table"], [41, 2, 1, "", "has_decoded_images"], [42, 2, 1, "", "load"], [43, 2, 1, "", "mask_image"]], "cvpy.utils.CASThreadTuner": [[44, 1, 1, "", "CASThreadTuner"]], "cvpy.utils.CASThreadTuner.CASThreadTuner": [[44, 2, 1, "", "__init__"], [45, 2, 1, "", "tune_thread_count"]], "cvpy.utils.ImageUtils": [[46, 1, 1, "", "ImageUtils"]], "cvpy.utils.ImageUtils.ImageUtils": [[46, 2, 1, "", "__init__"], [47, 2, 1, "", "convert_numpy_to_wide"], [48, 2, 1, "", "convert_to_CAS_column"], [49, 2, 1, "", "convert_wide_to_numpy"], [50, 2, 1, "", "get_image_array"], [51, 2, 1, "", "get_image_array_const_ctype"], [52, 2, 1, "", "get_image_array_from_row"]], "cvpy.visualization": [[53, 3, 1, "", "display_3D_image_slices"], [54, 3, 1, "", "display_3D_image_slices_from_array"], [55, 3, 1, "", "display_3D_surface"], [56, 3, 1, "", "display_image_slice"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": [0, 57], "refer": 0, "annot": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 22, 23, 24, 25, 26, 27, 28], "credenti": [0, 1], "project": [0, 2, 3, 4, 5, 6, 7, 8], "cvat": [0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "task": 0, "authent": [0, 10], "tabl": [0, 57], "biomed": 0, "imag": [0, 38, 39, 40, 41, 42, 43], "natur": 0, "util": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52], "ca": 0, "thread": 0, "tuner": 0, "result": 0, "visual": [0, 53, 54, 55, 56], "cvpy": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "as_dict": [3, 13, 25, 36, 39], "get_annot": [4, 15], "post_imag": [5, 16], "resum": [6, 17], "save": [7, 18], "to_json": [8, 19], "cvatauthent": [9, 10, 11], "generate_cvat_token": 11, "cvatproject": [12, 13, 14, 15, 16, 17, 18, 19], "from_json": 14, "cvattask": [20, 21], "from_dict": 21, "casthreadtunerresult": [22, 23], "plot_exec_tim": 23, "imaget": [24, 25, 26, 27, 28, 36, 37], "from_tabl": [26, 32, 40], "has_decoded_imag": [27, 37, 41], "load": [28, 33, 42], "biomedimag": [29, 30, 31, 32, 33, 34, 35, 36, 37], "biomedimaget": [29, 30, 31, 32, 33, 34, 35, 36, 37], "fetch_geometry_info": 30, "fetch_image_arrai": 31, "morphological_gradi": 34, "spheric": 35, "naturalimaget": [38, 39, 40, 41, 42, 43], "mask_imag": 43, "casthreadtun": [44, 45], "tune_thread_count": 45, "imageutil": [46, 47, 48, 49, 50, 51, 52], "convert_numpy_to_wid": 47, "convert_to_cas_column": 48, "convert_wide_to_numpi": 49, "get_image_arrai": 50, "get_image_array_const_ctyp": 51, "get_image_array_from_row": 52, "display_3d_image_slic": 53, "display_3d_image_slices_from_arrai": 54, "display_3d_surfac": 55, "display_image_slic": 56, "sa": 57, "viya": 57, "comput": 57, "vision": 57, "python": 57, "overview": 57, "contribut": 57, "licens": [57, 59], "addit": 57, "resourc": 57, "content": 57, "index": 57, "instal": 58, "prerequisit": 58, "mayavi": 58}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Annotation": [[0, "annotation"]], "Base": [[0, "base"]], "Credentials": [[0, "credentials"]], "Project": [[0, "project"]], "CVAT": [[0, "cvat"]], "CVAT Project": [[0, "cvat-project"]], "CVAT Task": [[0, "cvat-task"]], "CVAT Authentication": [[0, "cvat-authentication"]], "Tables": [[0, "tables"]], "Biomedical Image Table": [[0, "biomedical-image-table"]], "Image Table": [[0, "image-table"]], "Natural Image Table": [[0, "natural-image-table"]], "Utilities": [[0, "utilities"]], "CAS Thread Tuner": [[0, "cas-thread-tuner"]], "CAS Thread Tuner Results": [[0, "cas-thread-tuner-results"]], "Image Utilities": [[0, "image-utilities"]], "Visualization": [[0, "visualization"]], "cvpy.annotation.base.Credentials.Credentials": [[1, "cvpy-annotation-base-credentials-credentials"]], "cvpy.annotation.base.Project.Project": [[2, "cvpy-annotation-base-project-project"]], "cvpy.annotation.base.Project.Project.as_dict": [[3, "cvpy-annotation-base-project-project-as-dict"]], "cvpy.annotation.base.Project.Project.get_annotations": [[4, "cvpy-annotation-base-project-project-get-annotations"]], "cvpy.annotation.base.Project.Project.post_images": [[5, "cvpy-annotation-base-project-project-post-images"]], "cvpy.annotation.base.Project.Project.resume": [[6, "cvpy-annotation-base-project-project-resume"]], "cvpy.annotation.base.Project.Project.save": [[7, "cvpy-annotation-base-project-project-save"]], "cvpy.annotation.base.Project.Project.to_json": [[8, "cvpy-annotation-base-project-project-to-json"]], "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator": [[9, "cvpy-annotation-cvat-cvatauthenticator-cvatauthenticator"]], "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.authenticate": [[10, "cvpy-annotation-cvat-cvatauthenticator-cvatauthenticator-authenticate"]], "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.generate_cvat_token": [[11, "cvpy-annotation-cvat-cvatauthenticator-cvatauthenticator-generate-cvat-token"]], "cvpy.annotation.cvat.CVATProject.CVATProject": [[12, "cvpy-annotation-cvat-cvatproject-cvatproject"]], "cvpy.annotation.cvat.CVATProject.CVATProject.as_dict": [[13, "cvpy-annotation-cvat-cvatproject-cvatproject-as-dict"]], "cvpy.annotation.cvat.CVATProject.CVATProject.from_json": [[14, "cvpy-annotation-cvat-cvatproject-cvatproject-from-json"]], "cvpy.annotation.cvat.CVATProject.CVATProject.get_annotations": [[15, "cvpy-annotation-cvat-cvatproject-cvatproject-get-annotations"]], "cvpy.annotation.cvat.CVATProject.CVATProject.post_images": [[16, "cvpy-annotation-cvat-cvatproject-cvatproject-post-images"]], "cvpy.annotation.cvat.CVATProject.CVATProject.resume": [[17, "cvpy-annotation-cvat-cvatproject-cvatproject-resume"]], "cvpy.annotation.cvat.CVATProject.CVATProject.save": [[18, "cvpy-annotation-cvat-cvatproject-cvatproject-save"]], "cvpy.annotation.cvat.CVATProject.CVATProject.to_json": [[19, "cvpy-annotation-cvat-cvatproject-cvatproject-to-json"]], "cvpy.annotation.cvat.CVATTask.CVATTask": [[20, "cvpy-annotation-cvat-cvattask-cvattask"]], "cvpy.annotation.cvat.CVATTask.CVATTask.from_dict": [[21, "cvpy-annotation-cvat-cvattask-cvattask-from-dict"]], "cvpy.base.CASThreadTunerResults.CASThreadTunerResults": [[22, "cvpy-base-casthreadtunerresults-casthreadtunerresults"]], "cvpy.base.CASThreadTunerResults.CASThreadTunerResults.plot_exec_times": [[23, "cvpy-base-casthreadtunerresults-casthreadtunerresults-plot-exec-times"]], "cvpy.base.ImageTable.ImageTable": [[24, "cvpy-base-imagetable-imagetable"]], "cvpy.base.ImageTable.ImageTable.as_dict": [[25, "cvpy-base-imagetable-imagetable-as-dict"]], "cvpy.base.ImageTable.ImageTable.from_table": [[26, "cvpy-base-imagetable-imagetable-from-table"]], "cvpy.base.ImageTable.ImageTable.has_decoded_images": [[27, "cvpy-base-imagetable-imagetable-has-decoded-images"]], "cvpy.base.ImageTable.ImageTable.load": [[28, "cvpy-base-imagetable-imagetable-load"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable": [[29, "cvpy-biomedimage-biomedimagetable-biomedimagetable"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_geometry_info": [[30, "cvpy-biomedimage-biomedimagetable-biomedimagetable-fetch-geometry-info"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_image_array": [[31, "cvpy-biomedimage-biomedimagetable-biomedimagetable-fetch-image-array"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.from_table": [[32, "cvpy-biomedimage-biomedimagetable-biomedimagetable-from-table"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.load": [[33, "cvpy-biomedimage-biomedimagetable-biomedimagetable-load"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.morphological_gradient": [[34, "cvpy-biomedimage-biomedimagetable-biomedimagetable-morphological-gradient"]], "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.sphericity": [[35, "cvpy-biomedimage-biomedimagetable-biomedimagetable-sphericity"]], "cvpy.biomedimage.BiomedImageTable.ImageTable.as_dict": [[36, "cvpy-biomedimage-biomedimagetable-imagetable-as-dict"]], "cvpy.biomedimage.BiomedImageTable.ImageTable.has_decoded_images": [[37, "cvpy-biomedimage-biomedimagetable-imagetable-has-decoded-images"]], "cvpy.image.NaturalImageTable.NaturalImageTable": [[38, "cvpy-image-naturalimagetable-naturalimagetable"]], "cvpy.image.NaturalImageTable.NaturalImageTable.as_dict": [[39, "cvpy-image-naturalimagetable-naturalimagetable-as-dict"]], "cvpy.image.NaturalImageTable.NaturalImageTable.from_table": [[40, "cvpy-image-naturalimagetable-naturalimagetable-from-table"]], "cvpy.image.NaturalImageTable.NaturalImageTable.has_decoded_images": [[41, "cvpy-image-naturalimagetable-naturalimagetable-has-decoded-images"]], "cvpy.image.NaturalImageTable.NaturalImageTable.load": [[42, "cvpy-image-naturalimagetable-naturalimagetable-load"]], "cvpy.image.NaturalImageTable.NaturalImageTable.mask_image": [[43, "cvpy-image-naturalimagetable-naturalimagetable-mask-image"]], "cvpy.utils.CASThreadTuner.CASThreadTuner": [[44, "cvpy-utils-casthreadtuner-casthreadtuner"]], "cvpy.utils.CASThreadTuner.CASThreadTuner.tune_thread_count": [[45, "cvpy-utils-casthreadtuner-casthreadtuner-tune-thread-count"]], "cvpy.utils.ImageUtils.ImageUtils": [[46, "cvpy-utils-imageutils-imageutils"]], "cvpy.utils.ImageUtils.ImageUtils.convert_numpy_to_wide": [[47, "cvpy-utils-imageutils-imageutils-convert-numpy-to-wide"]], "cvpy.utils.ImageUtils.ImageUtils.convert_to_CAS_column": [[48, "cvpy-utils-imageutils-imageutils-convert-to-cas-column"]], "cvpy.utils.ImageUtils.ImageUtils.convert_wide_to_numpy": [[49, "cvpy-utils-imageutils-imageutils-convert-wide-to-numpy"]], "cvpy.utils.ImageUtils.ImageUtils.get_image_array": [[50, "cvpy-utils-imageutils-imageutils-get-image-array"]], "cvpy.utils.ImageUtils.ImageUtils.get_image_array_const_ctype": [[51, "cvpy-utils-imageutils-imageutils-get-image-array-const-ctype"]], "cvpy.utils.ImageUtils.ImageUtils.get_image_array_from_row": [[52, "cvpy-utils-imageutils-imageutils-get-image-array-from-row"]], "cvpy.visualization.display_3D_image_slices": [[53, "cvpy-visualization-display-3d-image-slices"]], "cvpy.visualization.display_3D_image_slices_from_array": [[54, "cvpy-visualization-display-3d-image-slices-from-array"]], "cvpy.visualization.display_3D_surface": [[55, "cvpy-visualization-display-3d-surface"]], "cvpy.visualization.display_image_slice": [[56, "cvpy-visualization-display-image-slice"]], "SAS Viya Computer Vision API for Python": [[57, "module-cvpy"]], "Overview": [[57, "overview"]], "Contributing": [[57, "contributing"]], "License": [[57, "license"], [59, "license"]], "Additional Resources": [[57, "additional-resources"]], "Table of Contents": [[57, "table-of-contents"]], "Index": [[57, "index"]], "Installation": [[58, "installation"]], "Prerequisites": [[58, "prerequisites"]], "Mayavi Installation": [[58, "mayavi-installation"]], "CVPy Installation": [[58, "cvpy-installation"]]}, "indexentries": {"credentials (class in cvpy.annotation.base.credentials)": [[1, "cvpy.annotation.base.Credentials.Credentials"]], "__init__() (cvpy.annotation.base.credentials.credentials method)": [[1, "cvpy.annotation.base.Credentials.Credentials.__init__"]], "project (class in cvpy.annotation.base.project)": [[2, "cvpy.annotation.base.Project.Project"]], "__init__() (cvpy.annotation.base.project.project method)": [[2, "cvpy.annotation.base.Project.Project.__init__"]], "as_dict() (cvpy.annotation.base.project.project method)": [[3, "cvpy.annotation.base.Project.Project.as_dict"]], "get_annotations() (cvpy.annotation.base.project.project method)": [[4, "cvpy.annotation.base.Project.Project.get_annotations"]], "post_images() (cvpy.annotation.base.project.project method)": [[5, "cvpy.annotation.base.Project.Project.post_images"]], "resume() (cvpy.annotation.base.project.project static method)": [[6, "cvpy.annotation.base.Project.Project.resume"]], "save() (cvpy.annotation.base.project.project method)": [[7, "cvpy.annotation.base.Project.Project.save"]], "to_json() (cvpy.annotation.base.project.project method)": [[8, "cvpy.annotation.base.Project.Project.to_json"]], "cvatauthenticator (class in cvpy.annotation.cvat.cvatauthenticator)": [[9, "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator"]], "__init__() (cvpy.annotation.cvat.cvatauthenticator.cvatauthenticator method)": [[9, "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.__init__"]], "authenticate() (cvpy.annotation.cvat.cvatauthenticator.cvatauthenticator static method)": [[10, "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.authenticate"]], "generate_cvat_token() (cvpy.annotation.cvat.cvatauthenticator.cvatauthenticator static method)": [[11, "cvpy.annotation.cvat.CVATAuthenticator.CVATAuthenticator.generate_cvat_token"]], "cvatproject (class in cvpy.annotation.cvat.cvatproject)": [[12, "cvpy.annotation.cvat.CVATProject.CVATProject"]], "__init__() (cvpy.annotation.cvat.cvatproject.cvatproject method)": [[12, "cvpy.annotation.cvat.CVATProject.CVATProject.__init__"]], "as_dict() (cvpy.annotation.cvat.cvatproject.cvatproject method)": [[13, "cvpy.annotation.cvat.CVATProject.CVATProject.as_dict"]], "from_json() (cvpy.annotation.cvat.cvatproject.cvatproject static method)": [[14, "cvpy.annotation.cvat.CVATProject.CVATProject.from_json"]], "get_annotations() (cvpy.annotation.cvat.cvatproject.cvatproject method)": [[15, "cvpy.annotation.cvat.CVATProject.CVATProject.get_annotations"]], "post_images() (cvpy.annotation.cvat.cvatproject.cvatproject method)": [[16, "cvpy.annotation.cvat.CVATProject.CVATProject.post_images"]], "resume() (cvpy.annotation.cvat.cvatproject.cvatproject static method)": [[17, "cvpy.annotation.cvat.CVATProject.CVATProject.resume"]], "save() (cvpy.annotation.cvat.cvatproject.cvatproject method)": [[18, "cvpy.annotation.cvat.CVATProject.CVATProject.save"]], "to_json() (cvpy.annotation.cvat.cvatproject.cvatproject method)": [[19, "cvpy.annotation.cvat.CVATProject.CVATProject.to_json"]], "cvattask (class in cvpy.annotation.cvat.cvattask)": [[20, "cvpy.annotation.cvat.CVATTask.CVATTask"]], "__init__() (cvpy.annotation.cvat.cvattask.cvattask method)": [[20, "cvpy.annotation.cvat.CVATTask.CVATTask.__init__"]], "from_dict() (cvpy.annotation.cvat.cvattask.cvattask static method)": [[21, "cvpy.annotation.cvat.CVATTask.CVATTask.from_dict"]], "casthreadtunerresults (class in cvpy.base.casthreadtunerresults)": [[22, "cvpy.base.CASThreadTunerResults.CASThreadTunerResults"]], "__init__() (cvpy.base.casthreadtunerresults.casthreadtunerresults method)": [[22, "cvpy.base.CASThreadTunerResults.CASThreadTunerResults.__init__"]], "plot_exec_times() (cvpy.base.casthreadtunerresults.casthreadtunerresults method)": [[23, "cvpy.base.CASThreadTunerResults.CASThreadTunerResults.plot_exec_times"]], "imagetable (class in cvpy.base.imagetable)": [[24, "cvpy.base.ImageTable.ImageTable"]], "__init__() (cvpy.base.imagetable.imagetable method)": [[24, "cvpy.base.ImageTable.ImageTable.__init__"]], "as_dict() (cvpy.base.imagetable.imagetable method)": [[25, "cvpy.base.ImageTable.ImageTable.as_dict"]], "from_table() (cvpy.base.imagetable.imagetable static method)": [[26, "cvpy.base.ImageTable.ImageTable.from_table"]], "has_decoded_images() (cvpy.base.imagetable.imagetable method)": [[27, "cvpy.base.ImageTable.ImageTable.has_decoded_images"]], "load() (cvpy.base.imagetable.imagetable static method)": [[28, "cvpy.base.ImageTable.ImageTable.load"]], "biomedimagetable (class in cvpy.biomedimage.biomedimagetable)": [[29, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable"]], "__init__() (cvpy.biomedimage.biomedimagetable.biomedimagetable method)": [[29, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.__init__"]], "fetch_geometry_info() (cvpy.biomedimage.biomedimagetable.biomedimagetable method)": [[30, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_geometry_info"]], "fetch_image_array() (cvpy.biomedimage.biomedimagetable.biomedimagetable method)": [[31, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.fetch_image_array"]], "from_table() (cvpy.biomedimage.biomedimagetable.biomedimagetable static method)": [[32, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.from_table"]], "load() (cvpy.biomedimage.biomedimagetable.biomedimagetable static method)": [[33, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.load"]], "morphological_gradient() (cvpy.biomedimage.biomedimagetable.biomedimagetable method)": [[34, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.morphological_gradient"]], "sphericity() (cvpy.biomedimage.biomedimagetable.biomedimagetable method)": [[35, "cvpy.biomedimage.BiomedImageTable.BiomedImageTable.sphericity"]], "as_dict() (cvpy.biomedimage.biomedimagetable.imagetable method)": [[36, "cvpy.biomedimage.BiomedImageTable.ImageTable.as_dict"]], "has_decoded_images() (cvpy.biomedimage.biomedimagetable.imagetable method)": [[37, "cvpy.biomedimage.BiomedImageTable.ImageTable.has_decoded_images"]], "naturalimagetable (class in cvpy.image.naturalimagetable)": [[38, "cvpy.image.NaturalImageTable.NaturalImageTable"]], "__init__() (cvpy.image.naturalimagetable.naturalimagetable method)": [[38, "cvpy.image.NaturalImageTable.NaturalImageTable.__init__"]], "as_dict() (cvpy.image.naturalimagetable.naturalimagetable method)": [[39, "cvpy.image.NaturalImageTable.NaturalImageTable.as_dict"]], "from_table() (cvpy.image.naturalimagetable.naturalimagetable static method)": [[40, "cvpy.image.NaturalImageTable.NaturalImageTable.from_table"]], "has_decoded_images() (cvpy.image.naturalimagetable.naturalimagetable method)": [[41, "cvpy.image.NaturalImageTable.NaturalImageTable.has_decoded_images"]], "load() (cvpy.image.naturalimagetable.naturalimagetable static method)": [[42, "cvpy.image.NaturalImageTable.NaturalImageTable.load"]], "mask_image() (cvpy.image.naturalimagetable.naturalimagetable method)": [[43, "cvpy.image.NaturalImageTable.NaturalImageTable.mask_image"]], "casthreadtuner (class in cvpy.utils.casthreadtuner)": [[44, "cvpy.utils.CASThreadTuner.CASThreadTuner"]], "__init__() (cvpy.utils.casthreadtuner.casthreadtuner method)": [[44, "cvpy.utils.CASThreadTuner.CASThreadTuner.__init__"]], "tune_thread_count() (cvpy.utils.casthreadtuner.casthreadtuner static method)": [[45, "cvpy.utils.CASThreadTuner.CASThreadTuner.tune_thread_count"]], "imageutils (class in cvpy.utils.imageutils)": [[46, "cvpy.utils.ImageUtils.ImageUtils"]], "__init__() (cvpy.utils.imageutils.imageutils method)": [[46, "cvpy.utils.ImageUtils.ImageUtils.__init__"]], "convert_numpy_to_wide() (cvpy.utils.imageutils.imageutils static method)": [[47, "cvpy.utils.ImageUtils.ImageUtils.convert_numpy_to_wide"]], "convert_to_cas_column() (cvpy.utils.imageutils.imageutils static method)": [[48, "cvpy.utils.ImageUtils.ImageUtils.convert_to_CAS_column"]], "convert_wide_to_numpy() (cvpy.utils.imageutils.imageutils static method)": [[49, "cvpy.utils.ImageUtils.ImageUtils.convert_wide_to_numpy"]], "get_image_array() (cvpy.utils.imageutils.imageutils static method)": [[50, "cvpy.utils.ImageUtils.ImageUtils.get_image_array"]], "get_image_array_const_ctype() (cvpy.utils.imageutils.imageutils static method)": [[51, "cvpy.utils.ImageUtils.ImageUtils.get_image_array_const_ctype"]], "get_image_array_from_row() (cvpy.utils.imageutils.imageutils static method)": [[52, "cvpy.utils.ImageUtils.ImageUtils.get_image_array_from_row"]], "display_3d_image_slices() (in module cvpy.visualization)": [[53, "cvpy.visualization.display_3D_image_slices"]], "display_3d_image_slices_from_array() (in module cvpy.visualization)": [[54, "cvpy.visualization.display_3D_image_slices_from_array"]], "display_3d_surface() (in module cvpy.visualization)": [[55, "cvpy.visualization.display_3D_surface"]], "display_image_slice() (in module cvpy.visualization)": [[56, "cvpy.visualization.display_image_slice"]], "cvpy": [[57, "module-cvpy"]], "module": [[57, "module-cvpy"]]}})